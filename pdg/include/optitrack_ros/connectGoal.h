// Generated by gencpp from file optitrack_ros/connectGoal.msg
// DO NOT EDIT!


#ifndef OPTITRACK_ROS_MESSAGE_CONNECTGOAL_H
#define OPTITRACK_ROS_MESSAGE_CONNECTGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace optitrack_ros
{
template <class ContainerAllocator>
struct connectGoal_
{
  typedef connectGoal_<ContainerAllocator> Type;

  connectGoal_()
    : host()
    , host_port()
    , mcast()
    , mcast_port()  {
    }
  connectGoal_(const ContainerAllocator& _alloc)
    : host(_alloc)
    , host_port(_alloc)
    , mcast(_alloc)
    , mcast_port(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _host_type;
  _host_type host;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _host_port_type;
  _host_port_type host_port;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mcast_type;
  _mcast_type mcast;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mcast_port_type;
  _mcast_port_type mcast_port;





  typedef boost::shared_ptr< ::optitrack_ros::connectGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::optitrack_ros::connectGoal_<ContainerAllocator> const> ConstPtr;

}; // struct connectGoal_

typedef ::optitrack_ros::connectGoal_<std::allocator<void> > connectGoal;

typedef boost::shared_ptr< ::optitrack_ros::connectGoal > connectGoalPtr;
typedef boost::shared_ptr< ::optitrack_ros::connectGoal const> connectGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::optitrack_ros::connectGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::optitrack_ros::connectGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace optitrack_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/msg'], 'optitrack_ros': ['optitrack_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::optitrack_ros::connectGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::optitrack_ros::connectGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optitrack_ros::connectGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optitrack_ros::connectGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optitrack_ros::connectGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optitrack_ros::connectGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::optitrack_ros::connectGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72e781da33ee2b450ac8874774da10e4";
  }

  static const char* value(const ::optitrack_ros::connectGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72e781da33ee2b45ULL;
  static const uint64_t static_value2 = 0x0ac8874774da10e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::optitrack_ros::connectGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "optitrack_ros/connectGoal";
  }

  static const char* value(const ::optitrack_ros::connectGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::optitrack_ros::connectGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# service connect\n\
string host\n\
string host_port\n\
string mcast\n\
string mcast_port\n\
";
  }

  static const char* value(const ::optitrack_ros::connectGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::optitrack_ros::connectGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.host);
      stream.next(m.host_port);
      stream.next(m.mcast);
      stream.next(m.mcast_port);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct connectGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::optitrack_ros::connectGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::optitrack_ros::connectGoal_<ContainerAllocator>& v)
  {
    s << indent << "host: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.host);
    s << indent << "host_port: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.host_port);
    s << indent << "mcast: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mcast);
    s << indent << "mcast_port: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mcast_port);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPTITRACK_ROS_MESSAGE_CONNECTGOAL_H
