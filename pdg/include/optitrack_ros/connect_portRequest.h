// Generated by gencpp from file optitrack_ros/connect_portRequest.msg
// DO NOT EDIT!


#ifndef OPTITRACK_ROS_MESSAGE_CONNECT_PORTREQUEST_H
#define OPTITRACK_ROS_MESSAGE_CONNECT_PORTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace optitrack_ros
{
template <class ContainerAllocator>
struct connect_portRequest_
{
  typedef connect_portRequest_<ContainerAllocator> Type;

  connect_portRequest_()
    : local()
    , remote()  {
    }
  connect_portRequest_(const ContainerAllocator& _alloc)
    : local(_alloc)
    , remote(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _local_type;
  _local_type local;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _remote_type;
  _remote_type remote;





  typedef boost::shared_ptr< ::optitrack_ros::connect_portRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::optitrack_ros::connect_portRequest_<ContainerAllocator> const> ConstPtr;

}; // struct connect_portRequest_

typedef ::optitrack_ros::connect_portRequest_<std::allocator<void> > connect_portRequest;

typedef boost::shared_ptr< ::optitrack_ros::connect_portRequest > connect_portRequestPtr;
typedef boost::shared_ptr< ::optitrack_ros::connect_portRequest const> connect_portRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::optitrack_ros::connect_portRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::optitrack_ros::connect_portRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace optitrack_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'optitrack_ros': ['optitrack_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::optitrack_ros::connect_portRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::optitrack_ros::connect_portRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optitrack_ros::connect_portRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optitrack_ros::connect_portRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optitrack_ros::connect_portRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optitrack_ros::connect_portRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::optitrack_ros::connect_portRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6e55028c71f6e37325d81ffd64dca28d";
  }

  static const char* value(const ::optitrack_ros::connect_portRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6e55028c71f6e373ULL;
  static const uint64_t static_value2 = 0x25d81ffd64dca28dULL;
};

template<class ContainerAllocator>
struct DataType< ::optitrack_ros::connect_portRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "optitrack_ros/connect_portRequest";
  }

  static const char* value(const ::optitrack_ros::connect_portRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::optitrack_ros::connect_portRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
string local\n\
string remote\n\
";
  }

  static const char* value(const ::optitrack_ros::connect_portRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::optitrack_ros::connect_portRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.local);
      stream.next(m.remote);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct connect_portRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::optitrack_ros::connect_portRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::optitrack_ros::connect_portRequest_<ContainerAllocator>& v)
  {
    s << indent << "local: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.local);
    s << indent << "remote: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.remote);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPTITRACK_ROS_MESSAGE_CONNECT_PORTREQUEST_H
