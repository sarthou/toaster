// Generated by gencpp from file optitrack_ros/or_pose_estimator_state.msg
// DO NOT EDIT!


#ifndef OPTITRACK_ROS_MESSAGE_OR_POSE_ESTIMATOR_STATE_H
#define OPTITRACK_ROS_MESSAGE_OR_POSE_ESTIMATOR_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <optitrack_ros/or_time_ts.h>
#include <optitrack_ros/or_t3d_pos.h>
#include <optitrack_ros/or_t3d_att.h>
#include <optitrack_ros/or_t3d_vel.h>
#include <optitrack_ros/or_t3d_avel.h>
#include <optitrack_ros/or_t3d_acc.h>
#include <optitrack_ros/or_t3d_aacc.h>
#include <optitrack_ros/or_t3d_pos_cov.h>
#include <optitrack_ros/or_t3d_att_cov.h>
#include <optitrack_ros/or_t3d_att_pos_cov.h>
#include <optitrack_ros/or_t3d_vel_cov.h>
#include <optitrack_ros/or_t3d_avel_cov.h>
#include <optitrack_ros/or_t3d_acc_cov.h>
#include <optitrack_ros/or_t3d_aacc_cov.h>

namespace optitrack_ros
{
template <class ContainerAllocator>
struct or_pose_estimator_state_
{
  typedef or_pose_estimator_state_<ContainerAllocator> Type;

  or_pose_estimator_state_()
    : ts()
    , intrinsic(false)
    , pos()
    , att()
    , vel()
    , avel()
    , acc()
    , aacc()
    , pos_cov()
    , att_cov()
    , att_pos_cov()
    , vel_cov()
    , avel_cov()
    , acc_cov()
    , aacc_cov()  {
    }
  or_pose_estimator_state_(const ContainerAllocator& _alloc)
    : ts(_alloc)
    , intrinsic(false)
    , pos(_alloc)
    , att(_alloc)
    , vel(_alloc)
    , avel(_alloc)
    , acc(_alloc)
    , aacc(_alloc)
    , pos_cov(_alloc)
    , att_cov(_alloc)
    , att_pos_cov(_alloc)
    , vel_cov(_alloc)
    , avel_cov(_alloc)
    , acc_cov(_alloc)
    , aacc_cov(_alloc)  {
  (void)_alloc;
    }



   typedef  ::optitrack_ros::or_time_ts_<ContainerAllocator>  _ts_type;
  _ts_type ts;

   typedef uint8_t _intrinsic_type;
  _intrinsic_type intrinsic;

   typedef std::vector< ::optitrack_ros::or_t3d_pos_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::optitrack_ros::or_t3d_pos_<ContainerAllocator> >::other >  _pos_type;
  _pos_type pos;

   typedef std::vector< ::optitrack_ros::or_t3d_att_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::optitrack_ros::or_t3d_att_<ContainerAllocator> >::other >  _att_type;
  _att_type att;

   typedef std::vector< ::optitrack_ros::or_t3d_vel_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::optitrack_ros::or_t3d_vel_<ContainerAllocator> >::other >  _vel_type;
  _vel_type vel;

   typedef std::vector< ::optitrack_ros::or_t3d_avel_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::optitrack_ros::or_t3d_avel_<ContainerAllocator> >::other >  _avel_type;
  _avel_type avel;

   typedef std::vector< ::optitrack_ros::or_t3d_acc_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::optitrack_ros::or_t3d_acc_<ContainerAllocator> >::other >  _acc_type;
  _acc_type acc;

   typedef std::vector< ::optitrack_ros::or_t3d_aacc_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::optitrack_ros::or_t3d_aacc_<ContainerAllocator> >::other >  _aacc_type;
  _aacc_type aacc;

   typedef std::vector< ::optitrack_ros::or_t3d_pos_cov_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::optitrack_ros::or_t3d_pos_cov_<ContainerAllocator> >::other >  _pos_cov_type;
  _pos_cov_type pos_cov;

   typedef std::vector< ::optitrack_ros::or_t3d_att_cov_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::optitrack_ros::or_t3d_att_cov_<ContainerAllocator> >::other >  _att_cov_type;
  _att_cov_type att_cov;

   typedef std::vector< ::optitrack_ros::or_t3d_att_pos_cov_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::optitrack_ros::or_t3d_att_pos_cov_<ContainerAllocator> >::other >  _att_pos_cov_type;
  _att_pos_cov_type att_pos_cov;

   typedef std::vector< ::optitrack_ros::or_t3d_vel_cov_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::optitrack_ros::or_t3d_vel_cov_<ContainerAllocator> >::other >  _vel_cov_type;
  _vel_cov_type vel_cov;

   typedef std::vector< ::optitrack_ros::or_t3d_avel_cov_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::optitrack_ros::or_t3d_avel_cov_<ContainerAllocator> >::other >  _avel_cov_type;
  _avel_cov_type avel_cov;

   typedef std::vector< ::optitrack_ros::or_t3d_acc_cov_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::optitrack_ros::or_t3d_acc_cov_<ContainerAllocator> >::other >  _acc_cov_type;
  _acc_cov_type acc_cov;

   typedef std::vector< ::optitrack_ros::or_t3d_aacc_cov_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::optitrack_ros::or_t3d_aacc_cov_<ContainerAllocator> >::other >  _aacc_cov_type;
  _aacc_cov_type aacc_cov;





  typedef boost::shared_ptr< ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator> const> ConstPtr;

}; // struct or_pose_estimator_state_

typedef ::optitrack_ros::or_pose_estimator_state_<std::allocator<void> > or_pose_estimator_state;

typedef boost::shared_ptr< ::optitrack_ros::or_pose_estimator_state > or_pose_estimator_statePtr;
typedef boost::shared_ptr< ::optitrack_ros::or_pose_estimator_state const> or_pose_estimator_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace optitrack_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/msg'], 'optitrack_ros': ['optitrack_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aeb1fb61729c34c3f1a7169833cbcac6";
  }

  static const char* value(const ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaeb1fb61729c34c3ULL;
  static const uint64_t static_value2 = 0xf1a7169833cbcac6ULL;
};

template<class ContainerAllocator>
struct DataType< ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "optitrack_ros/or_pose_estimator_state";
  }

  static const char* value(const ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# IDL struct ::or_pose_estimator::state\n\
or_time_ts ts\n\
bool intrinsic\n\
or_t3d_pos[] pos\n\
or_t3d_att[] att\n\
or_t3d_vel[] vel\n\
or_t3d_avel[] avel\n\
or_t3d_acc[] acc\n\
or_t3d_aacc[] aacc\n\
or_t3d_pos_cov[] pos_cov\n\
or_t3d_att_cov[] att_cov\n\
or_t3d_att_pos_cov[] att_pos_cov\n\
or_t3d_vel_cov[] vel_cov\n\
or_t3d_avel_cov[] avel_cov\n\
or_t3d_acc_cov[] acc_cov\n\
or_t3d_aacc_cov[] aacc_cov\n\
\n\
================================================================================\n\
MSG: optitrack_ros/or_time_ts\n\
# IDL struct ::or::time::ts\n\
int32 sec\n\
int32 nsec\n\
\n\
================================================================================\n\
MSG: optitrack_ros/or_t3d_pos\n\
# IDL struct ::or::t3d::pos\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: optitrack_ros/or_t3d_att\n\
# IDL struct ::or::t3d::att\n\
float64 qw\n\
float64 qx\n\
float64 qy\n\
float64 qz\n\
\n\
================================================================================\n\
MSG: optitrack_ros/or_t3d_vel\n\
# IDL struct ::or::t3d::vel\n\
float64 vx\n\
float64 vy\n\
float64 vz\n\
\n\
================================================================================\n\
MSG: optitrack_ros/or_t3d_avel\n\
# IDL struct ::or::t3d::avel\n\
float64 wx\n\
float64 wy\n\
float64 wz\n\
\n\
================================================================================\n\
MSG: optitrack_ros/or_t3d_acc\n\
# IDL struct ::or::t3d::acc\n\
float64 ax\n\
float64 ay\n\
float64 az\n\
\n\
================================================================================\n\
MSG: optitrack_ros/or_t3d_aacc\n\
# IDL struct ::or::t3d::aacc\n\
float64 awx\n\
float64 awy\n\
float64 awz\n\
\n\
================================================================================\n\
MSG: optitrack_ros/or_t3d_pos_cov\n\
# IDL struct ::or::t3d::pos_cov\n\
float64[6] cov\n\
\n\
================================================================================\n\
MSG: optitrack_ros/or_t3d_att_cov\n\
# IDL struct ::or::t3d::att_cov\n\
float64[10] cov\n\
\n\
================================================================================\n\
MSG: optitrack_ros/or_t3d_att_pos_cov\n\
# IDL struct ::or::t3d::att_pos_cov\n\
float64[12] cov\n\
\n\
================================================================================\n\
MSG: optitrack_ros/or_t3d_vel_cov\n\
# IDL struct ::or::t3d::vel_cov\n\
float64[6] cov\n\
\n\
================================================================================\n\
MSG: optitrack_ros/or_t3d_avel_cov\n\
# IDL struct ::or::t3d::avel_cov\n\
float64[6] cov\n\
\n\
================================================================================\n\
MSG: optitrack_ros/or_t3d_acc_cov\n\
# IDL struct ::or::t3d::acc_cov\n\
float64[6] cov\n\
\n\
================================================================================\n\
MSG: optitrack_ros/or_t3d_aacc_cov\n\
# IDL struct ::or::t3d::aacc_cov\n\
float64[6] cov\n\
";
  }

  static const char* value(const ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ts);
      stream.next(m.intrinsic);
      stream.next(m.pos);
      stream.next(m.att);
      stream.next(m.vel);
      stream.next(m.avel);
      stream.next(m.acc);
      stream.next(m.aacc);
      stream.next(m.pos_cov);
      stream.next(m.att_cov);
      stream.next(m.att_pos_cov);
      stream.next(m.vel_cov);
      stream.next(m.avel_cov);
      stream.next(m.acc_cov);
      stream.next(m.aacc_cov);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct or_pose_estimator_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::optitrack_ros::or_pose_estimator_state_<ContainerAllocator>& v)
  {
    s << indent << "ts: ";
    s << std::endl;
    Printer< ::optitrack_ros::or_time_ts_<ContainerAllocator> >::stream(s, indent + "  ", v.ts);
    s << indent << "intrinsic: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.intrinsic);
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::optitrack_ros::or_t3d_pos_<ContainerAllocator> >::stream(s, indent + "    ", v.pos[i]);
    }
    s << indent << "att[]" << std::endl;
    for (size_t i = 0; i < v.att.size(); ++i)
    {
      s << indent << "  att[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::optitrack_ros::or_t3d_att_<ContainerAllocator> >::stream(s, indent + "    ", v.att[i]);
    }
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::optitrack_ros::or_t3d_vel_<ContainerAllocator> >::stream(s, indent + "    ", v.vel[i]);
    }
    s << indent << "avel[]" << std::endl;
    for (size_t i = 0; i < v.avel.size(); ++i)
    {
      s << indent << "  avel[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::optitrack_ros::or_t3d_avel_<ContainerAllocator> >::stream(s, indent + "    ", v.avel[i]);
    }
    s << indent << "acc[]" << std::endl;
    for (size_t i = 0; i < v.acc.size(); ++i)
    {
      s << indent << "  acc[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::optitrack_ros::or_t3d_acc_<ContainerAllocator> >::stream(s, indent + "    ", v.acc[i]);
    }
    s << indent << "aacc[]" << std::endl;
    for (size_t i = 0; i < v.aacc.size(); ++i)
    {
      s << indent << "  aacc[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::optitrack_ros::or_t3d_aacc_<ContainerAllocator> >::stream(s, indent + "    ", v.aacc[i]);
    }
    s << indent << "pos_cov[]" << std::endl;
    for (size_t i = 0; i < v.pos_cov.size(); ++i)
    {
      s << indent << "  pos_cov[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::optitrack_ros::or_t3d_pos_cov_<ContainerAllocator> >::stream(s, indent + "    ", v.pos_cov[i]);
    }
    s << indent << "att_cov[]" << std::endl;
    for (size_t i = 0; i < v.att_cov.size(); ++i)
    {
      s << indent << "  att_cov[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::optitrack_ros::or_t3d_att_cov_<ContainerAllocator> >::stream(s, indent + "    ", v.att_cov[i]);
    }
    s << indent << "att_pos_cov[]" << std::endl;
    for (size_t i = 0; i < v.att_pos_cov.size(); ++i)
    {
      s << indent << "  att_pos_cov[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::optitrack_ros::or_t3d_att_pos_cov_<ContainerAllocator> >::stream(s, indent + "    ", v.att_pos_cov[i]);
    }
    s << indent << "vel_cov[]" << std::endl;
    for (size_t i = 0; i < v.vel_cov.size(); ++i)
    {
      s << indent << "  vel_cov[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::optitrack_ros::or_t3d_vel_cov_<ContainerAllocator> >::stream(s, indent + "    ", v.vel_cov[i]);
    }
    s << indent << "avel_cov[]" << std::endl;
    for (size_t i = 0; i < v.avel_cov.size(); ++i)
    {
      s << indent << "  avel_cov[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::optitrack_ros::or_t3d_avel_cov_<ContainerAllocator> >::stream(s, indent + "    ", v.avel_cov[i]);
    }
    s << indent << "acc_cov[]" << std::endl;
    for (size_t i = 0; i < v.acc_cov.size(); ++i)
    {
      s << indent << "  acc_cov[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::optitrack_ros::or_t3d_acc_cov_<ContainerAllocator> >::stream(s, indent + "    ", v.acc_cov[i]);
    }
    s << indent << "aacc_cov[]" << std::endl;
    for (size_t i = 0; i < v.aacc_cov.size(); ++i)
    {
      s << indent << "  aacc_cov[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::optitrack_ros::or_t3d_aacc_cov_<ContainerAllocator> >::stream(s, indent + "    ", v.aacc_cov[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPTITRACK_ROS_MESSAGE_OR_POSE_ESTIMATOR_STATE_H
