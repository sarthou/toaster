// Generated by gencpp from file optitrack_ros/get_local_portResponse.msg
// DO NOT EDIT!


#ifndef OPTITRACK_ROS_MESSAGE_GET_LOCAL_PORTRESPONSE_H
#define OPTITRACK_ROS_MESSAGE_GET_LOCAL_PORTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace optitrack_ros
{
template <class ContainerAllocator>
struct get_local_portResponse_
{
  typedef get_local_portResponse_<ContainerAllocator> Type;

  get_local_portResponse_()
    : genom_success(false)
    , genom_exdetail()
    , local_port(0)  {
    }
  get_local_portResponse_(const ContainerAllocator& _alloc)
    : genom_success(false)
    , genom_exdetail(_alloc)
    , local_port(0)  {
  (void)_alloc;
    }



   typedef uint8_t _genom_success_type;
  _genom_success_type genom_success;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _genom_exdetail_type;
  _genom_exdetail_type genom_exdetail;

   typedef uint16_t _local_port_type;
  _local_port_type local_port;





  typedef boost::shared_ptr< ::optitrack_ros::get_local_portResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::optitrack_ros::get_local_portResponse_<ContainerAllocator> const> ConstPtr;

}; // struct get_local_portResponse_

typedef ::optitrack_ros::get_local_portResponse_<std::allocator<void> > get_local_portResponse;

typedef boost::shared_ptr< ::optitrack_ros::get_local_portResponse > get_local_portResponsePtr;
typedef boost::shared_ptr< ::optitrack_ros::get_local_portResponse const> get_local_portResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::optitrack_ros::get_local_portResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::optitrack_ros::get_local_portResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace optitrack_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'optitrack_ros': ['optitrack_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::optitrack_ros::get_local_portResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::optitrack_ros::get_local_portResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optitrack_ros::get_local_portResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optitrack_ros::get_local_portResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optitrack_ros::get_local_portResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optitrack_ros::get_local_portResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::optitrack_ros::get_local_portResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab235123c219c0c5a555bd72f2eb478c";
  }

  static const char* value(const ::optitrack_ros::get_local_portResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab235123c219c0c5ULL;
  static const uint64_t static_value2 = 0xa555bd72f2eb478cULL;
};

template<class ContainerAllocator>
struct DataType< ::optitrack_ros::get_local_portResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "optitrack_ros/get_local_portResponse";
  }

  static const char* value(const ::optitrack_ros::get_local_portResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::optitrack_ros::get_local_portResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool genom_success\n\
string genom_exdetail\n\
uint16 local_port\n\
\n\
";
  }

  static const char* value(const ::optitrack_ros::get_local_portResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::optitrack_ros::get_local_portResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.genom_success);
      stream.next(m.genom_exdetail);
      stream.next(m.local_port);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct get_local_portResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::optitrack_ros::get_local_portResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::optitrack_ros::get_local_portResponse_<ContainerAllocator>& v)
  {
    s << indent << "genom_success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.genom_success);
    s << indent << "genom_exdetail: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.genom_exdetail);
    s << indent << "local_port: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.local_port);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPTITRACK_ROS_MESSAGE_GET_LOCAL_PORTRESPONSE_H
