// Generated by gencpp from file optitrack_ros/or_t3d_vel.msg
// DO NOT EDIT!


#ifndef OPTITRACK_ROS_MESSAGE_OR_T3D_VEL_H
#define OPTITRACK_ROS_MESSAGE_OR_T3D_VEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace optitrack_ros
{
template <class ContainerAllocator>
struct or_t3d_vel_
{
  typedef or_t3d_vel_<ContainerAllocator> Type;

  or_t3d_vel_()
    : vx(0.0)
    , vy(0.0)
    , vz(0.0)  {
    }
  or_t3d_vel_(const ContainerAllocator& _alloc)
    : vx(0.0)
    , vy(0.0)
    , vz(0.0)  {
  (void)_alloc;
    }



   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;

   typedef double _vz_type;
  _vz_type vz;





  typedef boost::shared_ptr< ::optitrack_ros::or_t3d_vel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::optitrack_ros::or_t3d_vel_<ContainerAllocator> const> ConstPtr;

}; // struct or_t3d_vel_

typedef ::optitrack_ros::or_t3d_vel_<std::allocator<void> > or_t3d_vel;

typedef boost::shared_ptr< ::optitrack_ros::or_t3d_vel > or_t3d_velPtr;
typedef boost::shared_ptr< ::optitrack_ros::or_t3d_vel const> or_t3d_velConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::optitrack_ros::or_t3d_vel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::optitrack_ros::or_t3d_vel_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace optitrack_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/msg'], 'optitrack_ros': ['optitrack_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::optitrack_ros::or_t3d_vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::optitrack_ros::or_t3d_vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optitrack_ros::or_t3d_vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optitrack_ros::or_t3d_vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optitrack_ros::or_t3d_vel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optitrack_ros::or_t3d_vel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::optitrack_ros::or_t3d_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ffb367ff390f5e01cb55c0c75927c19a";
  }

  static const char* value(const ::optitrack_ros::or_t3d_vel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xffb367ff390f5e01ULL;
  static const uint64_t static_value2 = 0xcb55c0c75927c19aULL;
};

template<class ContainerAllocator>
struct DataType< ::optitrack_ros::or_t3d_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "optitrack_ros/or_t3d_vel";
  }

  static const char* value(const ::optitrack_ros::or_t3d_vel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::optitrack_ros::or_t3d_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# IDL struct ::or::t3d::vel\n\
float64 vx\n\
float64 vy\n\
float64 vz\n\
";
  }

  static const char* value(const ::optitrack_ros::or_t3d_vel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::optitrack_ros::or_t3d_vel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct or_t3d_vel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::optitrack_ros::or_t3d_vel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::optitrack_ros::or_t3d_vel_<ContainerAllocator>& v)
  {
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<double>::stream(s, indent + "  ", v.vz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPTITRACK_ROS_MESSAGE_OR_T3D_VEL_H
