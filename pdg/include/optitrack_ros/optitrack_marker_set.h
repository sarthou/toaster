// Generated by gencpp from file optitrack_ros/optitrack_marker_set.msg
// DO NOT EDIT!


#ifndef OPTITRACK_ROS_MESSAGE_OPTITRACK_MARKER_SET_H
#define OPTITRACK_ROS_MESSAGE_OPTITRACK_MARKER_SET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <optitrack_ros/or_time_ts.h>
#include <optitrack_ros/optitrack_marker_pos.h>

namespace optitrack_ros
{
template <class ContainerAllocator>
struct optitrack_marker_set_
{
  typedef optitrack_marker_set_<ContainerAllocator> Type;

  optitrack_marker_set_()
    : ts()
    , markers()  {
    }
  optitrack_marker_set_(const ContainerAllocator& _alloc)
    : ts(_alloc)
    , markers(_alloc)  {
  (void)_alloc;
    }



   typedef  ::optitrack_ros::or_time_ts_<ContainerAllocator>  _ts_type;
  _ts_type ts;

   typedef std::vector< ::optitrack_ros::optitrack_marker_pos_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::optitrack_ros::optitrack_marker_pos_<ContainerAllocator> >::other >  _markers_type;
  _markers_type markers;





  typedef boost::shared_ptr< ::optitrack_ros::optitrack_marker_set_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::optitrack_ros::optitrack_marker_set_<ContainerAllocator> const> ConstPtr;

}; // struct optitrack_marker_set_

typedef ::optitrack_ros::optitrack_marker_set_<std::allocator<void> > optitrack_marker_set;

typedef boost::shared_ptr< ::optitrack_ros::optitrack_marker_set > optitrack_marker_setPtr;
typedef boost::shared_ptr< ::optitrack_ros::optitrack_marker_set const> optitrack_marker_setConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::optitrack_ros::optitrack_marker_set_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::optitrack_ros::optitrack_marker_set_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace optitrack_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/msg'], 'optitrack_ros': ['optitrack_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::optitrack_ros::optitrack_marker_set_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::optitrack_ros::optitrack_marker_set_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optitrack_ros::optitrack_marker_set_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optitrack_ros::optitrack_marker_set_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optitrack_ros::optitrack_marker_set_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optitrack_ros::optitrack_marker_set_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::optitrack_ros::optitrack_marker_set_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f5abab2d45ab92f993c63d04c21f26b3";
  }

  static const char* value(const ::optitrack_ros::optitrack_marker_set_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf5abab2d45ab92f9ULL;
  static const uint64_t static_value2 = 0x93c63d04c21f26b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::optitrack_ros::optitrack_marker_set_<ContainerAllocator> >
{
  static const char* value()
  {
    return "optitrack_ros/optitrack_marker_set";
  }

  static const char* value(const ::optitrack_ros::optitrack_marker_set_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::optitrack_ros::optitrack_marker_set_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# IDL struct ::optitrack::marker_set\n\
or_time_ts ts\n\
optitrack_marker_pos[] markers\n\
\n\
================================================================================\n\
MSG: optitrack_ros/or_time_ts\n\
# IDL struct ::or::time::ts\n\
int32 sec\n\
int32 nsec\n\
\n\
================================================================================\n\
MSG: optitrack_ros/optitrack_marker_pos\n\
# IDL struct ::optitrack::marker_pos\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::optitrack_ros::optitrack_marker_set_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::optitrack_ros::optitrack_marker_set_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ts);
      stream.next(m.markers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct optitrack_marker_set_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::optitrack_ros::optitrack_marker_set_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::optitrack_ros::optitrack_marker_set_<ContainerAllocator>& v)
  {
    s << indent << "ts: ";
    s << std::endl;
    Printer< ::optitrack_ros::or_time_ts_<ContainerAllocator> >::stream(s, indent + "  ", v.ts);
    s << indent << "markers[]" << std::endl;
    for (size_t i = 0; i < v.markers.size(); ++i)
    {
      s << indent << "  markers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::optitrack_ros::optitrack_marker_pos_<ContainerAllocator> >::stream(s, indent + "    ", v.markers[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPTITRACK_ROS_MESSAGE_OPTITRACK_MARKER_SET_H
